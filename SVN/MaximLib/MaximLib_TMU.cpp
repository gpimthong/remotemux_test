//DO NOT EDIT THIS FILE
/*** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-
*                                                                            
*	Source title:		Maximlib_TMU.CPP                                                                            		  
*	URL:				$URL: https://svn.maxim-ic.com/svn/ets/test_programs/AP89/AP89_FT/Trunk/MaximLib/MaximLib_TMU.cpp $
*   Last Modified by:	$LastChangedBy: govit.pimthong $                                       
*	Date:				$Date: 2017-03-09 12:55:55 +0700 (Thu, 09 Mar 2017) $                                                
*   Current Rev:		$Revision: 61735 $
*                                                                            
*	Description:  
*		Maxim library file for TMU
*		Maxim library written and maintained by:								 
*			Patrick Hayes (Patrick.Hayes@MaximIntegrated.com)	                 
*			Mark Bruening (Mark.Bruening@MaximIntegrated.com)                                                                            
*
*   Revision History
*		
*                                                                            
**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****/
//DO NOT EDIT THIS FILE

/**********************************************************************************************************************************************For*Doxygen**//**
@file	Maximlib_SPU.cpp
@brief	Maxim library file for TMU
**************************************************************************************************************************************************************/

	PinListData Maximqtmumt( PME_INT tmu, int mode, int timeout, int start , int stop, int slice )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		PinListData pldTemp;
		RESULTS_STR* Results;
		int ResultsSize = giNumSites;	//PME_INT only has one pin
		Results=new RESULTS_STR[ResultsSize];
		qtmumt(tmu,mode,timeout, start, stop, slice);
		ResultsSize = groupgetresults(Results,ResultsSize);
		pldTemp = PinListData(Results,1, ResultsSize);	//PME_INT only has one pin
		delete[] Results;
		return pldTemp;
	}

	PinListData Maximqtmumt( int tmu, int mode, int timeout, int start, int stop, int slice )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		qtmumt(tmu,mode,timeout, start, stop, slice);
		return pld_groupgetresults(4*giNumSites);	//Was GME_INT, changed to int to avoid an MST bug.  
													//Another MST bug prevents getting the group size from an int
													//Another MST bug prevent using the standard SPU groups defined on a Pin Map
													//Settled on defining a group in code and assuming their are only four QTMU pins in the config.

	}

		//Need to save count information for specific TMU to get count into for qtmumt and groupgetresults
	//Need a variable for each pin group,pin.  create a map?
	//Assuming 1 sample for now.
	//int Maximqtmuarm( int tmu, LPCTSTR source, int count, int trigger, int slope )
	//{
	//	QTMU_samples=count;
	//	return qtmuarm( tmu,  source,  count , trigger , slope );
	//}

	int Maximqtmuarm( int tmu, LPCTSTR source, int count , int trigger , int slope )
	{	
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return qtmuarm(  tmu,  source,  count ,  trigger ,  slope   ); 
		}

	int Maximqtmuinit( int tmu )
	{	
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return qtmuinit(  tmu ); 
	}

	int Maximqtmumode( int tmu, int mode, int ArmOut )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return qtmumode(  tmu,  mode,  ArmOut ); 
	}

	int Maximqtmustart( int tmu, LPCTSTR pinName, int pinType, int slope, int Holdoff , int RetriggerHoldoff , double AnalogLevel )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return qtmustart(  tmu,  pinName,  pinType,  slope,  Holdoff ,  RetriggerHoldoff,  AnalogLevel ); 
	}

	int Maximqtmustat( int tmu, QTMU_STR* qtmu_data, int StartSlice , int Revision )
	{	
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return qtmustat(  tmu,  qtmu_data,  StartSlice,  Revision ); 
	}

	int Maximqtmustop( int tmu, LPCTSTR pinName, int pinType, int slope, int Holdoff , int RetriggerHoldoff , double AnalogLevel )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return qtmustop(  tmu,  pinName,  pinType,  slope,  Holdoff ,  RetriggerHoldoff  ,  AnalogLevel ); 
	}


	namespace Maxim
	{
		/************************************************************************************************************************************************************For*Doxygen**//**
		Tell the "No Site" pin that it is physically connected to this site.  Required for the Measurement and Datalog functions.                                              
		
		@param	[pmeTMUPin]  A single QTMU channel
		@param	[iSite] The site to connect to.  Measurements will be associated with this site.  Pass NO_SITE to disassociate the pin with a site.
		
		@return	Zero on success.  Nonzero on failure (see msGroupSiteModify)

		@remark	The QTMU pin should be setup on the Pin Map Editor as a No Site to use this.
		**************************************************************************************************************************************************************/
		int Connect_TMU_Pin_To_Site(PME_INT pmeTMUPin, int iSite)
		{
			int iStatus = -1, i;
			int iPinNumber = pmeTMUPin[1];	//In a pin of type no site, the channel at index 1 is the pin number
			//TODO: verify input parameters
			//if (pmeTMUPin.Device != 
			if (((iSite < 0) || (iSite >= giNumSites)) && (iSite != NO_SITE))
			{
				etsprintf("Error!  Invalid site provided to Connect_TMU_Pin_To_Site function.\n");
				return iStatus;		//msGroupSiteModify returns nonzero to indicate failure.  
			}
		
		
			//First, remove the pin from all sites.
			for (i = 0; i < giNumSites; i++)
			{
				iStatus = msGroupSiteModify(i, FALSE, "QTMU%d", iPinNumber);
				//TODO?  report if msGroupSiteModify returns a failure here?
			}
			//Now add it to the site
			if ((iSite >= 0) && (iSite <giNumSites))
			{	
				iStatus = msGroupSiteModify(iSite, TRUE, "QTMU%d", iPinNumber);	//Add the pin to the site
			}
			return iStatus;
		}
	}