//DO NOT EDIT THIS FILE
/*** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-
*                                                                            
*	Source title:		Maximlib_System.h                                                                           		  
*	URL:				$URL: https://svn.maxim-ic.com/svn/ets/test_programs/AP89/AP89_FT/Trunk/MaximLib/MaximLib_PinMap.h $
*   Last Modified by:	$LastChangedBy: govit.pimthong $                                       
*	Date:				$Date: 2017-03-09 12:55:55 +0700 (Thu, 09 Mar 2017) $                                                
*   Current Rev:		$Revision: 61735 $
*                                                                            
*	Description:
*		Maxim library header file for system functions
*		Maxim library written and maintained by:		
*			Brad Sitton (Brad.Sitton@Maxim-IC.com
*			Patrick Hayes (Patrick.Hayes@Maxim-IC.com)	                 
*			Mark Bruening (Mark.Bruening@Maxim-IC.com)                                                                            
*
*   Revision History                                                    
*                                                                            
**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****/
//DO NOT EDIT THIS FILE

/**********************************************************************************************************************************************For*Doxygen**//**
@file	Maximlib_PinMap.h
@brief	Maxim library header file for PinMap functions
**************************************************************************************************************************************************************/

#ifndef MAXIMLIB_PINMAP_H
#define MAXIMLIB_PINMAP_H


#include <string>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <map>
#include <set>
#include <vector>
#include <stdarg.h>

namespace Maxim {
	
	namespace PinMap
	{

		int Maximgroupset(int iPosition, char *ptrcName, char *ptrcResource, ...); // Overload for ETS groupset command.  Slight different from MaximCBitGroupset function.

	class MaximPGMEInt{
	private:
		int miPosition;		// Integer number that ETS software uses when calling the group.  This number is important to engineers.
		std::string name;	// Name of the pin or group
		bool isPMEInt;		// Indicates whether data contained is a PMEINT or not.  GME_INTS need to go through recursion on group members.
		nameset_e type;			// Integer that indicates instrument type.  Types are enumerated in cdef500.h and are prefixed with NAME_
		std::vector <int> mviGroupMembers;	// List of all members of the group.  Need to use a vector, since in PME_INT, the order represents order from lowest to highest site.
	public:
		MaximPGMEInt(int iPosition=-1, std::string name="", nameset_e type=NAME_START, bool isPMEInt=true) : miPosition(iPosition), name(name), type(type), isPMEInt(isPMEInt) {;}
		int				GetPosition(){return miPosition;} //Returns the integer number that ETS software uses when calling the specific group.
		nameset_e		GetType(){return type;} //Returns the type of the instrument. Types are defined in cdef500d.h with enum nameset_e.
		std::string		GetName(){return name;}	//Returns the name that you have associated with the group.
		//Returns a list of all instruments/groups that make up this group.
		std::vector<int> GetGroupMembers() { return mviGroupMembers; }
		bool			IsGMEInt(){return !isPMEInt;} // Indicates if this group is made from other groups
		bool			IsPMEInt(){return  isPMEInt;} // Indicates if this group is made from specific instruments. 
		bool			IsCBit(){return (type == NAME_CBIT);} // type = 0 corresponds to CBit
		void			AddToGroup(int iPosition){this->mviGroupMembers.push_back(iPosition);}
		int				CountResources(); // Counts the number of instruments/resources that are controlled by this group
		std::map<int, int>	GetInstrumentSiteMap(); // Creates a map of sites based on instrument
	};


	class PinMapGroupInfo {				// Temporary storage when importing group information from pin map file.
	public:
		std::string msName;
		int miPosition;
		nameset_e meType;
		PinMapGroupInfo( char** results=NULL);
	};

	int LoadPGMEInt();		// Load all PME_INT and GME_INT information into a single table.  Put P and G together and I came up with PGMEInt for the combined name.

	
	extern std::map <int, Maxim::PinMap::MaximPGMEInt> mapPGMEInt; // Map containing critical information from Pin Map Editor
	extern std::map<int, std::map<int, int>> mapResourceChannelSite;	// Map of maps to track which resources are associated with which sites

	//Easy to use functions, much shorter and more intuitive than accessing the map elements
	extern	int CountResources(int iPinGroup);
	extern	std::map<int, int> GetInstrumentSiteMap(int iPinGroup);
	extern	std::string GetPinName(int iPinGroup);
	extern	std::vector<int> GetResources(int iPinGroup);
	extern	nameset_e GetInstrumentType(int iPinGroup);
	//Easy to use functions for DPU, much shorter and more intuitive than accessing the map elements
	extern	int CountResources(std::string sPinGroup);
	extern	std::vector<int> GetResources(std::string sPinGroup);
	int FindAvailableGroupNumber(int iPinGroup=9999);


	} //namespace System
} //namespace Maxim






#endif

