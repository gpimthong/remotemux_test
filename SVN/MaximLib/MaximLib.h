//DO NOT EDIT THIS FILE
/*** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-
*                                                                            
*	Source title:		Maximlib.h                                                                           		  
*	URL:				$URL: https://svn.maxim-ic.com/svn/ets/test_programs/AP89/AP89_FT/Trunk/MaximLib/MaximLib.h $
*   Last Modified by:	$LastChangedBy: govit.pimthong $                                       
*	Date:				$Date: 2017-03-09 12:55:55 +0700 (Thu, 09 Mar 2017) $                                                
*   Current Rev:		$Revision: 61735 $
*                                                                            
*	Description:
*		Maxim library header file used to include all the other MaximLib header files.  This is done so the Template only needs to #include one header file.
*		Maxim library written and maintained by:								 
*			Patrick Hayes (Patrick.Hayes@MaximIntegrated.com)	                 
*			Mark Bruening (Mark.Bruening@MaximIntegrated.com)                                                                            
*
*   Revision History                                                    
*                                                                            
**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****/
//DO NOT EDIT THIS FILE

/**********************************************************************************************************************************************For*Doxygen**//**
@file	MaximLib.h
@brief	Maxim library header file used to include all the other MaximLib header files.  This is done so the Template only needs to @#include one header file.
**************************************************************************************************************************************************************/

#ifndef MAXIMLIB_H
#define MAXIMLIB_H


//General Purpose Switches
#define     GPSW_Characterization_Mode		1	//For test programs use ... if(GetUserSwitch(GPSW_Characterization_Mode))
#define     GPSW_Time_Tests					2	//Required in the Maxim Template for test time datalog
#define     GPSW_Deglitch_Assist			3	//Required in the Maxim Template for the deglitch assistant
#define     GPSW_HW_CHECKER_MSG  			4	//Required in the Maxim Template for the HW Checker function. 
#define     GPSW_REAL_TIME_DATALOG			5	//Required in the Maxim Template for Real Time Datalog.
#define     GPSW_Single_Site_Handtest		6	//Required in the Maxim Template for Single Site hand test.
#define     GPSW_Prober_Handler 			7	//Required in the Maxim Template for wafer prober X/Y coordinate datalogging. 
#define     GPSW_RESERVED3	  				8	//Required in the Maxim Template (for future use)
#define     GPSW_RESERVED4	  				9	//Required in the Maxim Template (for future use)
#define     GPSW_USER1		  				10	//Available switch for product specific use.  
#define     GPSW_USER2		  				11	//Available switch for product specific use.  
#define     GPSW_USER3		  				12	//Available switch for product specific use.  
#define     GPSW_USER4		  				13	//Available switch for product specific use.  
#define     GPSW_USER5		  				14	//Available switch for product specific use.  
//All GPSW_SITEn switches are required in the Maxim Template.  Used to enable or disable each site. 
//GPSW_SITE0 can be moved to a different location number, but all other GPSW_SITEn switches must immediately follow in consecutive numerical order. 
#define     GPSW_SITE0				        15				//Do not use the status of the site switches for any code.  These switches are only used in Engineering mode.  
#define     GPSW_SITE1				        GPSW_SITE0 + 1
#define     GPSW_SITE2				        GPSW_SITE0 + 2
#define     GPSW_SITE3				        GPSW_SITE0 + 3
#define     GPSW_SITE4				        GPSW_SITE0 + 4
#define     GPSW_SITE5				        GPSW_SITE0 + 5
#define     GPSW_SITE6				        GPSW_SITE0 + 6
#define     GPSW_SITE7				        GPSW_SITE0 + 7
#define     GPSW_SITE8				        GPSW_SITE0 + 8
#define     GPSW_SITE9				        GPSW_SITE0 + 9
#define     GPSW_SITE10				        GPSW_SITE0 + 10
#define     GPSW_SITE11				        GPSW_SITE0 + 11
#define     GPSW_SITE12				        GPSW_SITE0 + 12
#define     GPSW_SITE13				        GPSW_SITE0 + 13	
#define     GPSW_SITE14				        GPSW_SITE0 + 14	
#define     GPSW_SITE15				        GPSW_SITE0 + 15	
#define     GPSW_SITE16				        GPSW_SITE0 + 16	
#define     GPSW_SITE17				        GPSW_SITE0 + 17	
#define     GPSW_SITE18				        GPSW_SITE0 + 18	
#define     GPSW_SITE19				        GPSW_SITE0 + 19	
#define     GPSW_SITE20				        GPSW_SITE0 + 20	
#define     GPSW_SITE21				        GPSW_SITE0 + 21	
#define     GPSW_SITE22				        GPSW_SITE0 + 22	
#define     GPSW_SITE23				        GPSW_SITE0 + 23	
#define     GPSW_SITE24				        GPSW_SITE0 + 24	
#define     GPSW_SITE25				        GPSW_SITE0 + 25	
#define     GPSW_SITE26				        GPSW_SITE0 + 26	
#define     GPSW_SITE27				        GPSW_SITE0 + 27	
#define     GPSW_SITE28				        GPSW_SITE0 + 28	
#define     GPSW_SITE29				        GPSW_SITE0 + 29	
#define     GPSW_SITE30				        GPSW_SITE0 + 30	
#define     GPSW_SITE31				        GPSW_SITE0 + 31	
#define     MAX_SITE_SWITCH				    GPSW_SITE31			//Not a General Purpose Switch.  Used for Maxim::Exec::Lib_OnSot.  Increase this number if more site switches are added. 
//Define more General Purpose Switches here.
//#define     GPSW_NEW_SWITCH				MAX_SITE_SWITCH + 1	//Example define of new switch. 


//General Purpose Integers
#define     GPI_LoopCount			1	//Required in the Maxim Template for the OnSot function's looping capability.
#define     GPI_Loop_Delay			2	//Required in the Maxim Template for the OnSot function's looping capability.  Allows a user specified delay between each loop.
#define     GPI_RESERVED1	  		3	//Required in the Maxim Template (for future use)
#define     GPI_RESERVED2	  		4	//Required in the Maxim Template (for future use)
#define     GPI_RESERVED3	  		5	//Required in the Maxim Template (for future use)
//Define more General Purpose Integers here


//General Purpose Strings
#define     GPSTR_Part_Number       1	//Required by the MaximDLL to set the Part Number in Engineering mode.  Must be string number 1.
#define     GPSTR_Test_Step			2	//Required by the MaximDLL to set the Test Step in Engineering mode.  Must be string number 2.
#define     GPSTR_Location			3	//Required by the Maxim ETS-88 Loader to set the production facility name in the STDF file.  Must be string number 3.
#define     GPSTR_RESERVED1	  	4	//Required in the Maxim Template (for future use)
#define     GPSTR_RESERVED2	  	5	//Required in the Maxim Template (for future use)
#define     GPSTR_RESERVED3	  	6	//Required in the Maxim Template (for future use)

/// Can be used to represent an invalid index or event in most cases.  This value works in signed/unsigned int and long and 
///   should not normally be a value someone would use.  HUGE_VAL is used for doubles.  
#define MAXIM_INVALID 999999999 

/************************************************************************************************************************************************************For*Doxygen**//**
ForEachActive_iSite
Macro that is most likely to be used when simplifying site loops.
Limitation is that it requires the site variable to be named iSite and may not work in the rare case where a site loop inside a site loop is needed.

@code
	double dMax = 0;
	ForEachActive_iSite
	{
		dMax = max(dMax, fabs(sdValue[iSite]));
	}
@endcode
**************************************************************************************************************************************************************/
#define ForEachActive_iSite for(int iSite = 0; iSite< Maxim::GetNumSites(); iSite++) if(msSiteStat(iSite))


// The following #includes need to occur high on the list since they may define items that are used by later #include files

#include "MaximDLL.h"
#include "MaximLib_System.h"        //PinMap functions 
#include "MaximLib_PinMap.h"        //PinMap functions 
#include "MaximLib_SiteVar.h"		//SiteInt, SiteDouble, SiteBool
#include "MaximLib_PinListData.h"	//Pin List Data
#include "MaximLib_CBIT.h"			//CBIT functions    WARNING: This file must be included before MaximLib_Datalog.h to avoid a conflict with #define ms

// The following #includes do NOT have a known requirement on order that they are included
#include "Maximlib_Exec.h"			//Test Control functions
#include "MaximLib_Datalog.h"		//Maxim datalogging functions

#include "Maximlib_Datasheet.h"		//file for Eagle Datasheet functions
#include "Maximlib_Checker.h"		//Hardware Checker Functions
#include "Maximlib_DMM.h"			//HP Meter functions
#include "MaximLib_APU.h"			//APU functions
#include "MaximLib_DPIN.h"			//DPIN functions
#include "MaximLib_TMU.h"			//TMU functions
#include "MaximLib_SPU.h"			//SPU functions
#include "MaximLib_Deglitch.h"		//Deglitch functions
#include "MaximLib_DPAT.h"			//DPAT functions
#include "MaximLib_Results.h"       //Results functions
//#include "MaximLib_Galaxy.h"			//Galaxy functions
#ifdef GALAXY_PAT
#include <MaximGalaxy.h>				//Galaxy functions
#endif
//Map ETS functions to Maxim's library functions
#if !defined(MAXIMLIB_LIB)
//Undefine msSetSites due to test escape possibility.  
//Should not be used outside of executive functions.
#undef msSetSites
#define msSetSites 0

#undef msLogResultAll
#undef msLogResult
#undef msLogResultInit
// APU-12
#undef apu12init
#undef apu12set
#undef apu12mv
#undef apu12mi
#undef apu12setcapload
#undef apu12compare
#undef apu12connectbanks
#undef apu12kelvinmode
#undef apu12getwhereat
// CBITS
#undef cbitclose
#undef cbitopen

#undef cbita_close
#undef cbita_open
#undef cbita_set
#undef cbitb_close
#undef cbitb_open
#undef cbitb_set
#undef cbitc_close
#undef cbitc_open
#undef cbitc_set
#undef cbitd_close
#undef cbitd_open
#undef cbitd_set

//#undef groupset // Decided not to overload groupset since it is not clear how to make it transparent at this time.

// DPU
#undef dpinsysinit        
#undef dpindisconnect     
#undef dpinforce          
#undef dpinforceint       
#undef dpingetcapturedata 
#undef dpingetfaildata    
#undef dpingetfaildataex  
#undef dpingetfailpins    
#undef dpinlevel          
#undef dpinmi 
#undef dpinmv 
#undef dpinppviset
#undef dpinrcvset 
#undef dpinshviset
#undef dpinstrobe 
#undef dpinvicompare 
#undef dpinviset     
// QTMU
#undef qtmuarm
#undef qtmuinit
#undef qtmumode
#undef qtmumt
#undef qtmumt
#undef qtmustart
#undef qtmustat
#undef qtmustop
// SMART PIN UNTI - 112
#undef sp112clamp
#undef sp112comp 
#undef sp112filter
#undef sp112init 
#undef sp112kelvinmode
#undef sp112miaccum 
#undef sp112mvaccum 
#undef sp112pedestal
#undef sp112set
#undef sp112setcapload 
#undef sp112mv 
#undef sp112mi 
//Accum Functions
#undef average
#undef dspaverage
#undef peak
#undef dsppeak
#undef whereat
#undef dspwhereat


#define msLogResultAll Maxim::DatalogAll
#define msLogResult Maxim::Datalog
#define msLogResultInit Maxim::DatalogInit
// APU-12
#define apu12init Maximapu12init
#define apu12set Maximapu12set
#define apu12mv Maximapu12mv
#define apu12mi Maximapu12mi
#define apu12setcapload Maximapu12setcapload
#define apu12compare Maximapu12compare
#define apu12connectbanks Maximapu12connectbanks
#define apu12kelvinmode Maximapu12kelvinmode
#define apu12getwhereat Maximapu12getwhereat
// CBITS 
#define cbitclose Maxim::CBits::Extended::Maximcbitclose
#define cbitopen Maxim::CBits::Extended::Maximcbitopen

#define cbita_close Maxim::CBits::Extended::Maximcbita_close
#define cbita_open Maxim::CBits::Extended::Maximcbita_open
#define cbita_set Maxim::CBits::Extended::Maximcbita_set
#define cbitb_close Maxim::CBits::Extended::Maximcbitb_close
#define cbitb_open Maxim::CBits::Extended::Maximcbitb_open
#define cbitb_set Maxim::CBits::Extended::Maximcbitb_set
#define cbitc_close Maxim::CBits::Extended::Maximcbitc_close
#define cbitc_open Maxim::CBits::Extended::Maximcbitc_open
#define cbitc_set Maxim::CBits::Extended::Maximcbitc_set
#define cbitd_close Maxim::CBits::Extended::Maximcbitd_close
#define cbitd_open Maxim::CBits::Extended::Maximcbitd_open
#define cbitd_set Maxim::CBits::Extended::Maximcbitd_set

#define groupset Maxim::PinMap::Maximgroupset // Decided not to overload groupset since I don't see how to make the functions completely compatible

// DPU 
#define dpinsysinit Maximdpinsysinit
#define dpindisconnect Maximdpindisconnect
#define dpinforce Maximdpinforce
#define dpinforceint Maximdpinforceint
#define dpingetcapturedata Maximdpingetcapturedata
#define dpingetfaildata Maximdpingetfaildata
#define dpingetfaildataex Maximdpingetfaildataex
#define dpingetfailpins Maximdpingetfailpins
#define dpinlevel Maximdpinlevel
#define dpinlevelset Maximdpinlevelset 
#define dpinmi Maximdpinmi
#define dpinmv Maximdpinmv
#define dpinppviset Maximdpinppviset
#define dpinrcvset Maximdpinrcvset
#define dpinshviset Maximdpinshviset
#define dpinstrobe  Maximdpinstrobe
#define dpinvicompare Maximdpinvicompare
#define dpinviset Maximdpinviset
// QTMU 
#define qtmuarm Maximqtmuarm
#define qtmuinit Maximqtmuinit
#define qtmumode Maximqtmumode
#define qtmumt Maximqtmumt
#define qtmumt Maximqtmumt
#define qtmustart Maximqtmustart
#define qtmustat Maximqtmustat
#define qtmustop Maximqtmustop
// SMART PIN UNTI - 112
#define sp112clamp Maximsp112clamp
#define sp112comp  Maximsp112comp
#define sp112filter Maximsp112filter
#define sp112init  Maximsp112init
#define sp112kelvinmode Maximsp112kelvinmode
#define sp112miaccum  Maximsp112miaccum
#define sp112mvaccum  Maximsp112mvaccum
#define sp112pedestal Maximsp112pedestal
#define sp112set Maximsp112set
#define sp112setcapload  Maximsp112setcapload
#define sp112mv  Maximsp112mv
#define sp112mi  Maximsp112mi
//Accum Functions
#define average Maximaverage
#define dspaverage Maximdspaverage
#define peak Maximpeak
#define dsppeak Maximdsppeak
#define whereat Maximwhereat
#define dspwhereat Maximdspwhereat

#endif	// !defined(MAXIMLIB_LIB)




namespace Maxim
{
	//This Utils namespace is for backwards compatibility 
	namespace Utils
	{
		//deprecate this specific prototype
		_declspec(deprecated("\n\nDO NOT USE MeasTime function,  \nSee https://confluence.maxim-ic.com/display/ETS88/ETS-88+Libraries+QTMU instead.\n\n")) 
			PinListData MeasTime(PME_INT QtmuPin, int* SourcePins, int* ReceivePins, LPCTSTR ArmSource, int NumSamples, void (*FunctionCall)(LPCTSTR, int), 
			LPCTSTR PatternLabel, int QTMU_Timeout, int StartPinType, int StopPinType, int StartSlope, int StopSlope, int StartHoldOffCount, int StopHoldOffCount, 
			double StartTrig, double StopTrig,int StartRetriggerHoldoff, int StopRetriggerHoldoff);   
		#pragma deprecated(MeasTime) //deprecate all Maxim::Utils::Meastime functions. 

		_declspec(deprecated("\n\nDO NOT USE Measfreq function,  \nSee https://confluence.maxim-ic.com/display/ETS88/ETS-88+Libraries+QTMU instead.\n\n")) 
			PinListData MeasFreq(PME_INT QtmuPin, int* SourcePins, LPCTSTR ArmSource, int NumSamples, int QTMU_Timeout, int StartPinType, int StopPinType,	
			int StartSlope, int StopSlope, int StartHoldOffCount, int StopHoldOffCount, double StartTrig, double StopTrig, int StartRetriggerHoldoff, int StopRetriggerHoldoff);
		#pragma deprecated(Measfreq) 

		_declspec(deprecated("\n\nDO NOT USE MeasDutyCycle function,  \nSee https://confluence.maxim-ic.com/display/ETS88/ETS-88+Libraries+QTMU instead.\n\n")) 
			PinListData MeasDutyCycle(PME_INT QtmuPin, int* SourcePins, LPCTSTR ArmSource, int NumSamples, int QTMU_Timeout, int StartHoldOffCount, int StopHoldOffCount, 
			double StartTrig, double StopTrig, int StartRetriggerHoldoff, int StopRetriggerHoldoff);
		#pragma deprecated(MeasDutyCycle) 	 
	}
}


#endif	//#ifndef MAXIMLIB_H

#define ms	0.000001	//WARNING: Possible conflict if MaximLib_CBit.h is included after MaximLib_Datalog.h is included.  
                        //	Make sure CBIT file is included first.  #define statement is in MaximLibDatalog.h also


/************************************************************************************************************************************************************For*Doxygen**//**
@page quickStartProgramControl Program Control Quick Start

@details
Documents general purpose library functions that will help with program control. These functions are automatically included as part of the Maxim.dll. Read ETS-88 Libraries page for more library information.
Test Step, Part Number, and Limits

- Test Step and Part Number are passed into the program using General Purpose Strings.
    - The Part Number does not have to be the full external part number. For example it can be MAX8556 instead of MAX8556ETE.
    - The Part Number used in the test program will need to be mapped to the full external part number in the load file.
- MaximDLL reads in the user strings and sets the test step and part number. If either of the strings is invalid, the TE will be prompted with a selection box.

@section enableDisableCode Enable/Disable Blocks of Code using the Datasheet

- Within a test program you can enable or disable blocks of code by making use of the '''Gate_Part''' and '''Gate_Test_Step''' columns.
    - If the field is left blank, then Maxim::bTest_Enabled_By_Part_Gate and Maxim::bTest_Enabled_By_TestStep_Gate will return true for all cases
    - If the field has a value, then it indicates that Maxim::bTest_Enabled_By_Part_Gate and Maxim::bTest_Enabled_By_TestStep_Gate will return true for the matching value
    - If the field has a value that starts with '''!''' then true will be returned when there is '''not''' a match.
    - Example If you wanted to only run a block of code for MAX123
        - Put MAX123 in the Gate_Part column of the Datasheet for the first test that corresponds to the device specific block of code
            @code
            if(bTest_Enabled_By_Part_Gate(iDSIndex))
            {
            // Insert your device specific code here
            }
            @endcode
        - Note that at the point in your program where you include the block above, the value of iDSIndex should align with the corresponding tests in the Datasheet
    - Example: Run a block of code for FT_ROOM
        - Put FT_ROOM in the Gate_Test_Step column of the Datasheet for the first test that corresponds to the device specific block of code
            @code
                if(bTest_Enabled_By_TestStep_Gate(iDSIndex))
                {
                // Insert your device specific code here
                }
            @endcode
        - Note that at the point in your program where you include the block above, the value of iDSIndex should align with the corresponding tests in the Datasheet
    - Example: Do not run a block of code for MAX123
        - Put !MAX123 in the Gate_Part column of the Datasheet for the first test that corresponds to the device specific block of code
        @code
            if(bTest_Enabled_By_Part_Gate(iDSIndex))
            {
            // Insert your device specific code here
            }
        @endcode
        - Note that at the point in your program where you include the block above, the value of iDSIndex should align with the corresponding tests in the Datasheet

@section functionsForProgramControl Functions for Program Control

- Maxim::Limits::TestLimits
    @code
        Maxim::Limits::TestLimits("FT_ROOM",L_FT_ROOM, H_FT_ROOM, "MAX8556");
        Maxim::Limits::TestLimits("FT_ROOM",L_FT_ROOM, H_FT_ROOM, "MAX8557");
        Maxim::Limits::TestLimits("QA_ROOM",L_QA_ROOM, H_QA_ROOM, "MAX8556");
        Maxim::Limits::TestLimits("QA_ROOM",L_QA_ROOM, H_QA_ROOM, "MAX8557");
        Maxim::Limits::TestLimits("CHAR",L_CHAR_MAX8556, H_CHAR_MAX8556,"MAX8556");
        Maxim::Limits::TestLimits("CHAR",L_CHAR_MAX8557, H_CHAR_MAX8557, "MAX8557");
    @endcode
- Maxim::GetPartNumber
- Maxim::bPart_Number_Is
- Maxim::bTest_Disabled_By_Part_Gate
- Maxim::bTest_Enabled_By_Part_Gate
- Maxim::GetTestStep
- Maxim::bTest_Step_Is
- Maxim::bTest_Disabled_By_TestStep_Gate
- Maxim::bTest_Enabled_By_TestStep_Gate
- Maxim::init_DataSheet_Gating
- Maxim::isChar

**************************************************************************************************************************************************************/	