//DO NOT EDIT THIS FILE
/*** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-
*                                                                            
*	Source title:		Maximlib_DPIN.CPP                                                                            		  
*	URL:				$URL: https://svn.maxim-ic.com/svn/ets/test_programs/AP89/AP89_FT/Trunk/MaximLib/MaximLib_DPIN.cpp $
*   Last Modified by:	$LastChangedBy: govit.pimthong $                                       
*	Date:				$Date: 2017-03-09 12:55:55 +0700 (Thu, 09 Mar 2017) $                                                
*   Current Rev:		$Revision: 61735 $
*                                                                            
*	Description:  
*		Maxim library file for DPIN
*		Maxim library written and maintained by:								 
*			Patrick Hayes (Patrick.Hayes@MaximIntegrated.com)	                 
*			Mark Bruening (Mark.Bruening@MaximIntegrated.com)                                                                            
*
*   Revision History
*		
*                                                                            
**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****/
//DO NOT EDIT THIS FILE

/**********************************************************************************************************************************************For*Doxygen**//**
@file	MaximLib_DPIN.cpp
@brief	Maxim library file for DPIN functions
**************************************************************************************************************************************************************/

	PinListData Maximdpinmi ( LPCTSTR name, int samples, double delay, int site)
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		PinListData pldTemp;
		RESULTS_STR* Results;
		int iPinCount = Maxim::iGetNumPinsInGroup(name);
		int ResultsSize =iPinCount*giNumSites;	//This assumes that the group does not contain a pin with site information, and a pin with no site information.  TODO.
		Results=new RESULTS_STR[ResultsSize];
		dpinmi(name, samples, delay, site);
		groupgetresults(Results,ResultsSize);
		pldTemp = PinListData(Results,iPinCount, ResultsSize);
		delete[] Results;
		return pldTemp;
	}
	PinListData Maximdpinmv ( LPCTSTR name, int samples, double delay, int site)
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		PinListData pldTemp;
		RESULTS_STR* Results;
		int iPinCount = Maxim::iGetNumPinsInGroup(name);
		int ResultsSize =iPinCount*giNumSites;	//This assumes that the group does not contain a pin with site information, and a pin with no site information.  TODO.
		Results=new RESULTS_STR[ResultsSize];
		dpinmv(name, samples, delay, site);
		ResultsSize = groupgetresults(Results,ResultsSize);
		pldTemp = PinListData(Results,iPinCount, ResultsSize);
		delete[] Results;
		return pldTemp;
	}


	 int Maximdpinsysinit ( void )
	{	
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinsysinit ( ); 
	 }

	int Maximdpindisconnect     ( int site , LPCTSTR name )
	{	
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpindisconnect     (  site ,  name  ); 
	}

	int Maximdpinforce          ( LPCTSTR name, LPCTSTR force, double HiLevel , double LoLevel , int site  )
	{	
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinforce          (  name,  force,  HiLevel  ,  LoLevel  ,  site  ); 
	}

	int Maximdpinforceint       ( LPCTSTR name, INT64 force, double HiLevel , double LoLevel , int site  )
	{	
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinforceint       (  name,  force,  HiLevel  ,  LoLevel  ,  site  ); 
	}

	int Maximdpingetcapturedata ( LPCTSTR name, int type, int count, PINT64 array, int site )
	{	
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return  dpingetcapturedata (  name,  type,  count,  array,  site ); }
	int Maximdpingetfaildata    ( LPCTSTR name, DPIN_FAILSTR *failures, int steps, int site, int rev )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpingetfaildata    (  name,  failures,  steps,  site,  rev   ); 
	}

	int Maximdpingetfaildataex  ( LPCTSTR name, DPIN_FAILSTR_EX *failures, int steps, int site, int rev )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpingetfaildataex  (  name,  failures,  steps,  site,  rev  ); 
	}

	int Maximdpingetfailpins    ( LPCTSTR name, int mode, PINT64 failures, int site  )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpingetfailpins    (  name,  mode,  failures,  site ); 
	}

	int Maximdpinlevel          ( LPCTSTR name, LPCTSTR label, double DHi, double DLo, double RHi, double RLo, int site  )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinlevel          (  name,  label,  DHi,  DLo,  RHi,  RLo,  site ); 
	}

	int Maximdpinlevelset       ( LPCTSTR name, LPCTSTR label, double DHi, double DLo, double RHi, double RLo, double VTT , int site  )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinlevelset       (  name,  label,  DHi,  DLo,  RHi,  RLo,  VTT  ,  site ); 
	}

	int Maximdpinppviset        ( LPCTSTR name, int mode, double value , int irange , int site )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinppviset        (  name,  mode,  value ,  irange  ,  site  ); 
	}

	int Maximdpinrcvset         ( LPCTSTR name, int connect, double HiLevel , double LoLevel , int site  )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinrcvset         (  name,  connect,  HiLevel  ,  LoLevel  ,  site  ); 
	}

	int Maximdpinshviset        ( LPCTSTR name, int mode, double value , int vrange , int irange , int site  )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinshviset        (  name,  mode,  value ,  vrange  ,  irange  ,  site ); 
	}

	int Maximdpinstrobe         ( LPCTSTR name, int type, PINT64 results, int site )
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinstrobe         (  name,  type,  results,  site ); 
	}
	int Maximdpinvicompare      ( LPCTSTR name, int type, PINT64 pResults, int vrange, double hilevel, double lolevel, int site)
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinvicompare      (  name,  type,  pResults,  vrange,  hilevel,  lolevel,  site); 
	}

	int Maximdpinviset          ( LPCTSTR name, int mode, double value, int vrange, int irange, double uvclamp, double lvclamp, int site)
	{
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
		return dpinviset          (  name,  mode,  value,  vrange,  irange,  uvclamp,  lvclamp,  site); 
	}

	int Maximdpinviset          ( LPCTSTR name, int mode, SiteDouble sdValue, int vrange, int irange, double uvclamp, double lvclamp, int site)
	{
		// If all sites are equal, call the standard version which has the potential to be faster
		if(sdValue.AreAllSitesEqual()) 		return Maximdpinviset (  name,  mode,  sdValue[0],  vrange,  irange); 
		else return MAXIM_INVALID; // No accumulator on DPIN, but this function was needed to maintain similarity to APU and SPU
#ifdef MAXIM_DEGLITCH
		Maxim::Deglitch::glitch_handling();
#endif
//		return dpinviset          (  name,  mode,  sdValue,  vrange,  irange,  uvclamp,  lvclamp,  site); 
	}

namespace Maxim{
	namespace DPU{

/*		std::map<std::string, Maxim::System::CVISettings> mapSettings;

		int GetMeasureMode(std::string sPinGroup){return mapSettings.find(sPinGroup)->second.GetMeasureMode();}
		int GetForceMode(std::string sPinGroup){return mapSettings.find(sPinGroup)->second.GetForceMode();}
		double GetForcedValue(std::string sPinGroup){return mapSettings.find(sPinGroup)->second.GetForceValue();}
		int GetVRange(std::string sPinGroup){return mapSettings.find(sPinGroup)->second.GetVRange();}
		int GetIRange(std::string sPinGroup){return mapSettings.find(sPinGroup)->second.GetIRange();}
*/
	} //End of DPU namespace
} //End of Maxim namespace