//DO NOT EDIT THIS FILE
/*** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-
*                                                                            
*	Source title:		Maximlib_Datalog.h                                                                           		  
*	URL:				$URL: https://svn.maxim-ic.com/svn/ets/test_programs/AP89/AP89_FT/Trunk/MaximLib/MaximLib_Datalog.h $
*	Last Modified by:	$LastChangedBy: govit.pimthong $                                       
*	Date:				$Date: 2017-03-09 12:55:55 +0700 (Thu, 09 Mar 2017) $                                                
*	Current Rev:		$Revision: 61735 $
*                                                                            
*	Description:
*		Maxim library header file for datalog functions
*		Maxim library written and maintained by:								 
*			Patrick Hayes (Patrick.Hayes@MaximIntegrated.com)	                 
*			Mark Bruening (Mark.Bruening@MaximIntegrated.com)                                                                            
*
*   Revision History                                                    
*                                                                            
**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****/
//DO NOT EDIT THIS FILE

/**********************************************************************************************************************************************For*Doxygen**//**
@file	Maximlib_Datalog.h
@brief	Maxim library file for datalog functions
**************************************************************************************************************************************************************/

#ifndef MAXIMLIB_DATALOG_H
#define MAXIMLIB_DATALOG_H

#include <limits>

// Following is documentation to be used by Doxygen to create help files.
/************************************************************************************************************************************************************For*Doxygen**//**
@page quickStartDatalog Datalog Quick Start
@details 
@section overview Overview
- Maxim Datalog functions provide
	- Safe Power Down using Maxim::DatalogFlush
	- Test Time per Measurement See @ref testTimePerMeasurementSection.
	- Real Time Datalog
	- PinListData datalogs. Click @ref quickStartPinListData for more information.
- All Datalog calls just queue measurements into a buffer, you __MUST__ call Maxim::DatalogFlush() to trigger comparison to limits and failure checking.
	- Maxim::DatalogFlush() must be called at least once before the end of the ETS_PRGFLOW_FUNC.

@section examples Example Usage:
@code
//Perform setups and measurements.
Maxim::DatalogAll(DSIndex, pldResults1 * uA);	//Datalog in microAmps to match the units on the data sheet.
//Perform more setups and measurements.
Maxim::DatalogAll(DSIndex, pldResults2 * uV);	//Datalog in microVolts to match the units on the data sheet.
Maxim::DatalogFlush()   
@endcode

- See further code examples \ref quickStartPinListData "here".

@section testTimePerMeasurementSection Test Time per Measurement
    - Eagle's built in "Output Execution Timing" option can only output time between function calls. 
		- The Maxim::Datalog functions add the ability to record test time between each test within a function.
    - Test time will be recorded at each Maxim::DatalogAll or Maxim::Datalog call.
		- __Best Practice:__ call the Maxim::Datalog function immediately after the measurement function to record the test time at that point. 
    - Set the Test_Time User Switch to true to print the test time to the datalog output tab. 

@section realTimeDatalogSection Real Time Datalog
- Eagle's standard datalogging routine will only print the datalog to the screen after the entire test program has been run.  The Maxim::Datalog functions add the ability to print the datalog results for the test at each Maxim::DatalogAll or Maxim::Datalog call. 
- Set the [Real Time Datalog User Switch](https://confluence.maxim-ic.com/display/ETS88/ETS-88+Template#ETS-88Template-Switches) to true to enable the Real Time Datalog. Need to update link to @ref guideTemplate

@section definedUnitsSection Defined Units
The following units are defined to be used in Datalog functions to translate base units correctly.

@code
//Unit conversions for measured values.
//These constants are to be used for measured results.  They can be applied directly to PinListData results or other measured values to correct for the 
//  scaling before datalogging.  See example usage above.
#define MV	0.000001
#define KV	0.001
#define kV	0.001
#define V	1		//APU and SPU base units are Volts
#define mV	1000
#define uV	1000000
#define nV	1000000000

#define KA	0.000001
#define kA	0.000001
#define A	0.001
#define mA	1		//APU and SPU base units are milliAmps
#define uA	1000
#define nA	1000000
#define pA	1000000000

#define s	0.000000001
#define ms	0.000001
#define us	0.001
#define ns	1		//QTMU base units are in nanoseconds. 
#define ps	1000

#define GHz 0.000001
#define MHz 0.001
#define KHz 1
#define kHz	1		//QTMU base units are in Kilohertz
#define Hz  1000

#define dB	1
@endcode

@section reservedTestNumbersSection Reserved Test Numbers

    - The Maxim Library reserves the test numbers 1,888,000,000 through 1,888,999,999.
    - Please do not use test numbers in this range in your program.

@subsection automaticDatalogsSection Automatic Datalogs

        - Certain library functions take care of the datalogging automatically without being required to be included in the Datasheet (.PDS) file.
            - Note: do not use this automatic method for standard test program datalogs.  Test program datalog MUST be on the Datasheet (with limits and bins) for documentation and maintainability.  The library uses this method only to enforce standards and reduce the compliance burden for Test Engineers. 
        - Maxim in-house DPAT
        - Galaxy DPAT
        - Test Time (for factory planners)
            - Test numbers 1,888,888,880 - 1,888,888,889

**************************************************************************************************************************************************************/


//** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-
//Define unit conversion constants for datalogging
//Usage:	
//		PinListData pldResults;
//		apu12set( PinA, APU12_FV, 50 mV_f, APU12_3p6V, APU12_100UA, APU12_PIN_TO_VI );	//Force 50 mV.  Note the syntax for forced units does not use any math symbol.
//		lwait ( 100 us_f);	//	delay 100 microseconds.  Note the syntax for forced units does not use any math symbol.
//		pldResults = apu12mi( PinA, APU12_MI_1X, 100, 13.0 );	//Measure current in PinA (returns results for all sites in mA)
//		Maxim::DatalogAll(DSIndex, pldResults * uA);			//Datalog in microAmps to match the units on the data sheet.



//Unit conversions for measured values.
//These constants are to be used for measured results.  They can be applied directly to PinListData results or other measured values to correct for the 
//  scaling before datalogging.  See example usage above.

#define MV	0.000001 ///Testing Doxygen
#define KV	0.001
#define kV	0.001
#define V	1		//APU and SPU base units are Volts
#define mV	1000
#define uV	1000000
#define nV	1000000000

#define KA	0.000001
#define kA	0.000001
#define A	0.001
#define mA	1		//APU and SPU base units are milliAmps
#define uA	1000
#define nA	1000000
#define pA	1000000000

#define s	0.000000001
#define ms	0.000001		//WARNING: Possible conflict if MaximLib_CBit.h is included after MaximLib_Datalog.h is included.  Make sure CBIT file is included first.
							//  Duplicate #define is in maximlib.h to solve some compile issues.
#define us	0.001
#define ns	1		//QTMU base units are in nanoseconds. 
#define ps	1000

#define GHz 0.000001
#define MHz 0.001
#define KHz 1
#define kHz	1		//QTMU base units are in Kilohertz
#define Hz  1000

#define dB  1	//For datalogging

//Define macros to allow forced values to use the Unit conversions for measured values.
//Usage:  lwait(500 *s_to(us));		//wait 500 microseconds
#define s_to(unit) 1e9/unit		//Convert to ns, then to the requested unit scale
#define V_to(unit) 1/(unit)		//Convert to V, then to the requested unit scale
#define A_to(unit) 1e3/(unit)	//Convert to mA, then to the requested unit scale
//#define Hz_to(unit) 1e-3/(unit)	//Does any function force Hz? //Convert to KHz, then to the requested unit scale

//Unit conversions for forced values.
//These constants are to be used for forcing values.   See example usage above.  
//Note that these units already include the multiplication sign to avoid
#define MV_f	*1000000
#define KV_f	*1000
#define kV_f	*1000
#define V_f		*1		//APU and SPU base units are Volts
#define mV_f	*0.001
#define uV_f	*0.000001
#define nV_f	*0.000000001

#define KA_f	*1000000
#define kA_f	*1000000
#define A_f		*1000	
#define mA_f	*1		//APU and SPU base units are milliAmps
#define uA_f	*0.001
#define nA_f	*0.000001
#define pA_f	*0.000000001

#define s_f		*1000000
#define ms_f	*1000
#define us_f	*1		//QTMU base units are in microseconds. Also lwait and swait are in microseconds.
#define ns_f	*0.001		
#define ps_f	*0.000001

//Does any function force Hz? 
//#define GHz_f	*1000000
//#define MHz_f	*1000
//#define KHz_f	*1
//#define kHz_f	*1		//QTMU base units are in Kilohertz
//#define Hz_f	*0.001

//** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-


namespace Maxim
{
	
	//Declare  msLogResult functions
	int DatalogAll( int &index, RESULTS_STR *results, int resultsSize, int elementOffset, int elementSize);
	int DatalogAll( int &index, PinListData pld);
	//int DatalogAll( int &index, SiteBool sb);   convert to PLD
	int Datalog( int site, int index, double result);
	/*template <class T> int DatalogAll( int &index,   SiteVar<T> sv)   convert to PLD
	{
		int iRet;
		unsigned int uiSite;	
		iRet = SUCCESS;
		for (uiSite=0; uiSite<sv.size(); uiSite++)
		{
			if (msSiteStat(uiSite)) //if site is active.
				iRet = Datalog(uiSite, index, (double) sv[uiSite]) || iRet;
		}
		index++;
		return iRet;
	};*/


	int DatalogInit( PDS_INT TestNumber, PDS_INT SubTestNumber, PDS_CHAR TestDesc, 
									 PDS_DOUBLE LogFormat, PDS_DOUBLE TestLimitLo, PDS_DOUBLE TestLimitHi, 
									 PDS_CHAR TestLimitUnits, PDS_CHAR LoLimitBin,  PDS_CHAR HiLimitBin, 
									 PDS_DOUBLE LoSpec, PDS_DOUBLE HiSpec, int NumSites, int DataSheetSize );

	int DatalogInit( PDS_INT TestNumber, PDS_INT SubTestNumber, PDS_CHAR TestDesc, 
									 PDS_DOUBLE LogFormat, PDS_DOUBLE TestLimitLo, PDS_DOUBLE TestLimitHi, 
									 PDS_CHAR TestLimitUnits, PDS_CHAR LoLimitBin,  PDS_CHAR HiLimitBin, 
									 PDS_DOUBLE LoSpec, PDS_DOUBLE HiSpec,  int NumSites, PDS_DOUBLE OfflineAnswer,int DataSheetSize );

	__declspec(deprecated("Use DatalogFlush instead of Datalog.")) int Datalog();	//Flush the datalog

	int DatalogFlush(); //Flush the datalog
	//int iGetNumPinsInGroup(int iGroupOrPin);
	int iGetNumResourcesInGroup(LPCTSTR sName);
	int iGetNumPinsInGroup(std::string sName);

	namespace DatalogLib
	{
		void FlushTestTimeQueue();
		//Globals
		extern BOOL gTestTimeEnable;
		extern double gTestTimeCumulative;
		bool SiteDatalogged(int iSite); //set to true for site, return true if tested already, false if not.
		void SiteDatalogged();  //reset to false at beginning of program;
	}


	//void wait(unsigned long ulNanoSeconds) { mwait(ulNanoSeconds);};
	namespace Limits
	{
		double GetLoLimitbyIndex(int index);
		double GetLoLimitbyTestNum(int testnum);
		double GetHiLimitbyIndex(int index);
		double GetHiLimitbyTestNum(int testnum);
		char* GetTestNamebyIndex(int index);
		char* GetUnitsbyIndex(int index);
		int GetTestNumberbyIndex(int index);
		double STDFUnitsScaleToBase(int iIndex);
	}

}

	extern int giNumSites;
	extern std::string MaxLogFormat;

	bool bVerify_DataSheet_Fail_Bins( PDS_INT TestNumber, PDS_CHAR LoLimitBin,  PDS_CHAR HiLimitBin);

#endif
