//DO NOT EDIT THIS FILE
/*** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-
*
*	Source title:		MaximFunclib_Exec.CPP                                                                            		  
*	URL:				$URL: https://svn.maxim-ic.com/svn/ets/test_programs/AP89/AP89_FT/Trunk/MaximFuncLib/MaximFuncLib_Exec.cpp $
*	Last Modified by:	$LastChangedBy: govit.pimthong $                                       
*	Date:				$Date: 2017-03-09 12:55:55 +0700 (Thu, 09 Mar 2017) $                                                
*	Current Rev:		$Revision: 61735 $
*
*	Description:  
*		Maxim library file for Test Control functions
*		Maxim library written and maintained by:								 
*			Patrick Hayes (Patrick.Hayes@MaximIntegrated.com)	                 
*			Mark Bruening (Mark.Bruening@MaximIntegrated.com)                                                                            
*
*	Revision History:
*		See Maximlib_Exec.h file.
*
**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****/
//DO NOT EDIT THIS FILE

/**********************************************************************************************************************************************For*Doxygen**//**
@file	MaximFunclib_Exec.cpp
@brief	Maxim library file for Test Control functions
**************************************************************************************************************************************************************/

#define WIN32_LEAN_AND_MEAN             // Exclude rarely-used stuff from Windows headers


#include <string>
#include <algorithm>
//#include ".\MaximLib\MaximLib_OTP.h" // Needed because we initialize some OTP items here.  Normally do not want to include MaximFuncLib library headers here.


#define MAX_SITES 64	//Same as defined in Maximdll_internal.h

namespace Maxim
{
	///@brief Namespace used for a variety of Test Control Functions
	namespace Exec
	{
		namespace Func
		{

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the UserInit Test Control Function.  Initialize common program items and requirements for MaximLib and MaximDLL                                                

		@param	[iNumSites]  The number of sites defined in the Pin Map.  Pass the pre-defined NUM_SITES constant.
		@param	[bLoadVector] Set to true to load a vector file.   
		@param	[bInitMeter] Optional: Set to true to initialize and configure the Agilent Meter.  Default is false to maintain backwards compatibility.   
		@param	[iRealTimeDatalogSwitch] Optional: Pass in the switch number to allow the Real Time Datalog functionality.  
														Default is -1 (invalid switch number) to maintain backwards compatibility. 
		@returns	TRUE if UserInit was successful.  FALSE if the vector file failed to load.

		@remarks
				The bInitMeter parameter is set to false if not provided, however, the Template's default (in function UserInit) is true.  
				bInitMeter is only provided as an option because some ETS-88 testers do not have the proper meter hardware (as of 20111128).
				Once the hardware is fixed, bInitMeter should always be set to true, even if the program is not using the meter. 
		**************************************************************************************************************************************************************/
			BOOL Lib_UserInit(int iNumSites, bool bLoadVector, bool bInitMeter, int iRealTimeDatalogSwitch)
			{
				BOOL bRet =Maxim::Exec::Lib_UserInit(iNumSites, bLoadVector, bInitMeter, iRealTimeDatalogSwitch);

				return bRet;
			};


		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the UserExit Test Control Function.                                          

		@returns	Result of lower calls. 
		**************************************************************************************************************************************************************/
			BOOL Lib_UserExit()
			{
				BOOL bRet =Maxim::Exec::Lib_UserExit();
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnTestInit Test Control Function.                                       

		@returns	Result of lower calls.

		@remarks	This function is called prior to calling any product specific code in OnTestInit.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnTestInitPre()
			{
				BOOL bRet =Maxim::Exec::Lib_OnTestInitPre();
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnTestInit Test Control Function.                                          

		@returns	Result of lower calls. 
	
		@remarks:	
				This function is called prior to calling any product specific code in OnTestInit.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnTestInitPost()
			{
				BOOL bRet = Maxim::Exec::Lib_OnTestInitPost();
				return bRet;
			}


		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnTestExit Test Control Function.                                   

		@returns	Result of lower calls.
		@remarks	This function is called prior to calling any product specific code in OnTestExit.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnTestExitPre()
			{
				BOOL bRet =Maxim::Exec::Lib_OnTestExitPre();
				return bRet;
			}
		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnTestExit Test Control Function.                                           

		@returns	Result of lower calls.
	
		@remarks	This function is called after calling any product specific code in OnTestExit.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnTestExitPost()
			{
				BOOL bRet =Maxim::Exec::Lib_OnTestExitPost();
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnTestStartup Test Control Function.  Enables Test Timer at the start of the test.                                        

		@param	[bTimeTests] Set to TRUE to enable the test timer.  FALSE to disable test timing.  From the Template, pass GetUserSwitch(GPSW_Time_Tests).

		@returns	Result of lower calls.

		@remarks:	
				Sets global Maxim::DatalogLib::gTestTimeEnable.  It is used in Lib_OnTestCompletionPostPowerDown and Lib_OnSot. 
				This function is called prior to calling any product specific code in OnTestStartup.
		**************************************************************************************************************************************************************/
			//virtual BOOL FuncLib_OnTestStartupPre(BOOL bTimeTests){return TRUE;}

			BOOL Lib_OnTestStartupPre(BOOL bTimeTests)
			{
				BOOL bRet =Maxim::Exec::Lib_OnTestStartupPre( bTimeTests);

				Maxim::CBits::Extended::maximCBits.ResetRelayWaitTime();

				// Clear/Initialize variables that store device trim results.  We don't want previous DUT 
				// data being available while testing the next devices.
				Maxim::OTP::sharedTrimInformation.NewDevice(); 

				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnTestStartup Test Control Function.   .                                       

		@return		Result of lower calls.

		@remarks:	
				This function is called after calling any product specific code in OnTestStartup.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnTestStartupPost()
			{
				BOOL bRet =Maxim::Exec::Lib_OnTestStartupPost();

				return bRet;
			}


		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnTestCompletion Test Control Function before the power down sequence.                                       

		@returns	Result of lower calls.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnTestCompletionPrePowerDown()
			{
				BOOL bRet =Maxim::Exec::Lib_OnTestCompletionPrePowerDown();
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnTestCompletion Test Control Function after the power down sequence..  Calculates the test time for the program if enabled.                                       
	
		@return		Result of lower calls.
		@remarks	Global Maxim::DatalogLib::gTestTimeEnable is set in Lib_OnTestStartup. 
		**************************************************************************************************************************************************************/
			BOOL Lib_OnTestCompletionPostPowerDown()
			{
				BOOL bRet =Maxim::Exec::Lib_OnTestCompletionPostPowerDown();
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnLogData Test Control Function.  Sets up alarm posting for the datalog and STDF files.                           

		@param	[site] Passed in from OnLogData (not currently used)
		@param	[info] Passed in from OnLogData (not currently used)

		@return		Result of lower calls. 
		**************************************************************************************************************************************************************/
			BOOL Lib_OnLogData(int site, datalog_info_t& info  )
			{
				BOOL bRet =Maxim::Exec::Lib_OnLogData(site, info  );
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnFailSite Test Control Function before the power down sequence.             
	
		@param	[site] Passed in from OnFailSite (not currently used)
		@return		Result of lower calls.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnFailSitePrePowerDown(int site)
			{
				BOOL bRet =Maxim::Exec::Lib_OnFailSitePrePowerDown(site);
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnFailSite Test Control Function after the power down sequence.          
	
		@param	[site] Passed in from OnFailSite (not currently used)
	
		@return		Result of lower calls.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnFailSitePostPowerDown(int site)
			{
				BOOL bRet =Maxim::Exec::Lib_OnFailSitePostPowerDown(site);
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnSot Test Control Function.    Captures the Start of Test signal and sets up the program.  See Remarks. 

		@param	[SotValue] Passed in from OnSot.
		@param	[UserSwitchSite0] The General Purpose User Switch Number for the SITE_0 switch.
		@param	[UserSwitchSiteMax] The General Purpose User Switch Number for the last SITE_N switch.
		@param	[UserIntLoopCount] The General Purpose User Integer Number for the Loop_Count Integer.
		@param	[UserIntLoopDelayms] The General Purpose User Integer Number for the Loop_Delay_ms Integer.
		@param	[bCheckerPassed] Pass the result of  Maxim::HWC::bGet_Checker_Results().

		@return		Result of lower calls.

		@remarks
				- Enable or disable sites.  Enable test looping.  Setup the handler for Hardware Checker.
				- Global Maxim::DatalogLib::gTestTimeEnable is set in Lib_OnTestStartup.
				- The User parameters (UserSwitchSite0, UserSwitchSiteMax, UserIntLoopCount, and UserIntLoopDelayms) are passed by location number rather than result
					to save some execution time.  OnSot is called a very large number of times.  
				- This way, the results, such as GetUserInteger(UserIntLoopCount)), are only evaluated when required, instead of every time OnSot is called.
	
		**************************************************************************************************************************************************************/
			int Lib_OnSot(int SotValue, int UserSwitchSite0, int UserSwitchSiteMax, int UserIntLoopCount, int UserIntLoopDelayms, bool bCheckerPassed )
			{
				int iRetVal = Maxim::Exec::Lib_OnSot(SotValue, UserSwitchSite0, UserSwitchSiteMax, UserIntLoopCount, UserIntLoopDelayms, bCheckerPassed );
				return iRetVal;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnUtilError Test Control Function.          
	
		@param	[errnum] Passed in from OnUtilError (not currently used)

		@returns	Result of lower calls.
	
		@remarks:	
		**************************************************************************************************************************************************************/
			BOOL Lib_OnUtilError(int errnum)
			{
				BOOL bRet =Maxim::Exec::Lib_OnUtilError(errnum);
				return bRet;
			}

		/************************************************************************************************************************************************************For*Doxygen**//**
		Called by the OnInterlock Test Control Function.             
	
		@param	[intlocks] Passed in from OnInterlock (not currently used)
	
		@returns	Result of lower calls.
		**************************************************************************************************************************************************************/
			BOOL Lib_OnInterlock(ULONG intlocks)
			{
				BOOL bRet =Maxim::Exec::Lib_OnInterlock(intlocks);
				return bRet;
			}
		}
	}

}