//DO NOT EDIT THIS FILE
/*** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-
*                                                                            
*	Source title:		MaximFuncLib_Wafer.CPP                                                                            		  
*	URL:				$URL: https://svn.maxim-ic.com/svn/ets/test_programs/AP89/AP89_FT/Trunk/MaximFuncLib/MaximFuncLib_Wafer.cpp $
*   Last Modified by:	$LastChangedBy: govit.pimthong $                                       
*	Date:				$Date: 2017-03-09 12:55:55 +0700 (Thu, 09 Mar 2017) $                                                
*   Current Rev:		$Revision: 61735 $
*                                                                            
*	Description:  
*		Maxim library written and maintained by:								 
*			Patrick Hayes (Patrick.Hayes@MaximIntegrated.com)	                 
*			Mark Bruening (Mark.Bruening@MaximIntegrated.com)		                                                                       
*                                                                            
**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****-**** **** **** **** **** **** **** **** **** **** **** **** **** **** **** ****/
//DO NOT EDIT THIS FILE

/**********************************************************************************************************************************************For*Doxygen**//**
@file	MaximFuncLib_Wafer.cpp
@brief	Maxim Function library file for Wafer Functions.
**************************************************************************************************************************************************************/


namespace Maxim
{
	namespace Wafer
	{
		int GetWaferNumber()
		{

			//If in production, SUBLOT_NUMBER=wafer number
			//If in engineering, assume prober is connected.  Will return 0 if not.
			//if (Maxim::Operator())
			//{
				char buffer[128];
				int iRet;
				iRet=GetETSVariable(SUBLOT_NUMBER,buffer,sizeof(buffer));
				buffer[iRet]=0;
				return atoi(buffer);
				//atoi can return 0 if not convertible.  Handle this?
			//}
			//else
			//{
				
				//Could ask Engineer for wafer number or query SE-Probe every insertion?
			//}
		}
		void GetXYCoordinates(SiteInt &siX, SiteInt &siY)
		{
			for (int iSite=0; iSite<Maxim::GetNumSites(); iSite++)
			{
				int iSite2;
				iSite2=iSite+Maxim::GetNumSites()*(GetStationNumber()-1);
				// grab the xy coords from the driver 
				int iXCoord, iYCoord; 
				hpctrl(HNDLR_COORDS, iSite2, &iXCoord, &iYCoord);
				siX[iSite]=iXCoord;
				siY[iSite]=iYCoord;
			}
		}
		int FTDatalogXYCoordinates(PinListData pldX,PinListData pldY )
		{
			int iRet;	
			if (pldX.iGetNumPins() != 1||pldY.iGetNumPins() != 1)
			{
				return FAILURE;
			}
			else
			{
				iRet = SUCCESS;
				SetTestNumber(0);
				SetSubTestNumber(1988888880);
				iRet=msLogDataAll("XCoordinate",9.3,DBL_MAX,DBL_MAX,pldX.ResultsStructPtr(),Maxim::GetNumSites(),"") || iRet;

				SetTestNumber(0);
				SetSubTestNumber(1988888881);
				iRet=msLogDataAll("YCoordinate",9.3,DBL_MAX,DBL_MAX,pldY.ResultsStructPtr(),Maxim::GetNumSites(),"") || iRet;																					
			}
			return iRet;			
		}
		int FTDatalogWaferNumber(PinListData pldWaferNumber)
		{
			int iRet;	
			if (pldWaferNumber.iGetNumPins() != 1)
			{
				return FAILURE;
			}
			else
			{
				iRet = SUCCESS;
				SetTestNumber(0);
				SetSubTestNumber(1988888882);
				iRet=msLogDataAll("WaferNumber",9.3,DBL_MAX,DBL_MAX,pldWaferNumber.ResultsStructPtr(),Maxim::GetNumSites(),"") || iRet;

			}
			return iRet;			

		}
	}
}